AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy the Face-2-Face (F2F) FE onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  Face-2-Face Front can be invoked via the public API Gateway on the url in the
  F2FFrontURL output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  F2F Front ECS Service
  F2F Front egress to F2F API's API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.
Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  IsProduction: !Equals [ !Ref Environment, production ]
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

# DO WE NEED TO CHANGE THE ARN?

Mappings:
#   # See https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
#   # To be added later
#   #  PlatformConfiguration:
#   #    dev:
#   #      CSLSEGRESS: "This should not ever be set; the dev account is not configured to egress logs."
#   #    build:
#   #      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
#   #    staging:
#   #      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
#   #    integration:
#   #      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
#   #    production:
#   #      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython

#   # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

# //TODO DOUBLE CHECK WEBSITE URLS ARE CORRECT

  EnvironmentVariables:
    ### These environment variables are referenced further down the file.
    ### Please ensure that any variables defined for an environment are defined for _all_ environments.
    dev:
      EXTERNALWEBSITEHOST: "www.review-o.dev.account.gov.uk"
      APIBASEURL: "app.review-o.dev.account.gov.uk"
      SESSIONTABLENAME: "f2f-front-sessions-dev"
      GTMID: "TK92W68"
      ANALYTICSDOMAIN: "dev.account.gov.uk"
    build:
      EXTERNALWEBSITEHOST: "www.review-o.build.account.gov.uk"
      APIBASEURL: "app.review-o.build.account.gov.uk"
      SESSIONTABLENAME: "f2f-front-sessions-build"
      GTMID: "TK92W68"
      ANALYTICSDOMAIN: "build.account.gov.uk"
    staging:
      EXTERNALWEBSITEHOST: "www.review-o.staging.account.gov.uk"
      APIBASEURL: "app.review-o.staging.account.gov.uk"
      SESSIONTABLENAME: "f2f-front-sessions-staging"
      GTMID: "TK92W68"
      ANALYTICSDOMAIN: "staging.account.gov.uk"
    integration:
      EXTERNALWEBSITEHOST: "www.review-o.integration.account.gov.uk"
      APIBASEURL: "app.review-o.integration.account.gov.uk"
      SESSIONTABLENAME: "f2f-front-sessions-integration"
      GTMID: "TK92W68"
      ANALYTICSDOMAIN: "integration.account.gov.uk"
    production:
      EXTERNALWEBSITEHOST: "www.review-o.account.gov.uk"
      APIBASEURL: "app.review-o.account.gov.uk"
      SESSIONTABLENAME: "f2f-front-sessions-production"
      GTMID: "TT5HDKV"
      ANALYTICSDOMAIN: "account.gov.uk"

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        F2F Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the F2F Front load balancer and
        the F2F Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        F2F Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        F2F Front ECS permits inbound from the F2F Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub f2f-front-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  F2FFrontAccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/f2f-front-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub f2f-front-${Environment}
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200-499
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service
  F2FFrontEcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "F2F"
        - Key: Environment
          Value: !Sub "${Environment}"

  F2FFrontEcsService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref F2FFrontEcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: TRUE
          Rollback: TRUE
      DesiredCount: 2
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdA"
            - Fn::ImportValue:
                !Sub "${VpcStackName}-PrivateSubnetIdB"
      TaskDefinition: !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "F2F"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-F2FFront-ECS
      RetentionInDays: 14

  #  CSLSECSAccessSubscriptionFilter:
  #    Type: AWS::Logs::SubscriptionFilter
  #    Condition: IsNotDevelopment
  #    Properties:
  #      DestinationArn:
  #        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
  #      FilterPattern: ""
  #      LogGroupName: !Ref ECSAccessLogsGroup

  
  # Fargate tasks
  
  # ECSServiceTaskDefinition:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     ContainerDefinitions:
  #       - Essential: true
  #         Image: CONTAINER-IMAGE-PLACEHOLDER
  #         Name: app
  #         Environment:
  #           - Name: API_BASE_URL
  #             Value: !Sub
  #               - "https://${APIGatewayId}.execute-api.eu-west-2.amazonaws.com/${Environment}"
  #               - APIGatewayId:
  #                   # Fn::ImportValue: di-ipv-cri-f2f-PrivateF2FApiGatewayId
  #                   Fn::ImportValue: f2f-cri-api-F2FApiGatewayId  #Hardcoded , needs to be updated to use a parameter for BE stack name
  #                 Environment: !Ref Environment
  #           - Name: EXTERNAL_WEBSITE_HOST
  #             Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
  #           - Name: SESSION_TABLE_NAME
  #             Value: !FindInMap [EnvironmentVariables, !Ref Environment, SESSIONTABLENAME ]
  #           - Name: FRONT_END_URL
  #             Value: !Sub
  #               - "https://${Url}"
  #               - Url: !FindInMap [EnvironmentVariables, !Ref Environment, EXTERNALWEBSITEHOST ]

  #           #No backend api url available ????
  #           #            - Name: API_URL
  #           #              Value: !Sub
  #           #                - "https://${Url}"
  #           #                - Url: !ImportValue backend-api-apigateway-url
  #           - Name: GTM_ID
  #             Value: !Sub
  #               - "GTM-${ContainerId}"
  #               - ContainerId: !FindInMap [EnvironmentVariables, !Ref Environment, GTMID ]
  #           - Name: ANALYTICS_DOMAIN
  #             Value: !FindInMap [EnvironmentVariables, !Ref Environment, ANALYTICSDOMAIN ]

  #         PortMappings:
  #           - ContainerPort: 8080
  #             Protocol: tcp
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group : !Ref ECSAccessLogsGroup
  #             awslogs-region : !Sub ${AWS::Region}
  #             awslogs-stream-prefix : !Sub f2f-front-${Environment}
  #     Cpu: '256'
  #     ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
  #     Memory: '512'
  #     NetworkMode: awsvpc
  #     RequiresCompatibilities:
  #       - FARGATE
  #     TaskRoleArn: !GetAtt ECSTaskRole.Arn
  #     Tags:
  #       - Key: Name
  #         Value: !Sub "${AWS::StackName}-TaskDefinition"
  #       - Key: Product
  #         Value: "GOV.UK sign in"
  #       - Key: System
  #         Value: "F2F"
  #       - Key: Environment
  #         Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullF2FFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: F2fFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt F2fFrontSessionsTable.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  #
  # API Gateway
  #
  #

  ApiGwHttpEndpoint:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub f2f-front-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: '1.0'

  APIGWRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: 'ANY /{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 400
        ThrottlingRateLimit: 200
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength"
          }
  # WAFv2ACLAssociation:
  #   Type: AWS::WAFv2::WebACLAssociation
  #   Properties:
  #     ResourceArn: !Ref LoadBalancer
  #     WebACLArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Security/WafArn}}"

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-F2FFront-API-GW-AccessLogs
      RetentionInDays: 14

  #  CSLSAPIGWAccessSubscriptionFilter:
  #    Type: AWS::Logs::SubscriptionFilter
  #    Condition: IsNotDevelopment
  #    Properties:
  #      DestinationArn:
  #        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
  #      FilterPattern: ""
  #      LogGroupName: !Ref APIGWAccessLogsGroup


  # Autoscaling
  # The number of pods will increase when the configured CPU utilization is breached for more than 3 minutes.
  # Scaling down will occur after 15 minutes of 90% utilization of the configured CPU utilization.

  ECSAutoScalingTarget:
    Condition: IsProduction
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref   F2FFrontEcsCluster
          - !GetAtt F2FFrontEcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Condition: IsProduction
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref   F2FFrontEcsCluster
          - !GetAtt F2FFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

  ## www domain

  #  FrontCustomDomain:
  #    Type: AWS::ApiGatewayV2::DomainName
  #    Properties:
  #      DomainName: !FindInMap [ EnvironmentVariables, !Ref Environment, FEURL ]
  #      DomainNameConfigurations:
  #        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
  #          EndpointType: REGIONAL
  #          SecurityPolicy: TLS_1_2
  
  #  FrontApiRecord:
  #    Type: AWS::Route53::RecordSet
  #    Properties:
  #      Name: !FindInMap [EnvironmentVariables, !Ref Environment, FEURL ]
  #      Type: A
  #      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
  #      AliasTarget:
  #        DNSName: !GetAtt FrontCustomDomain.RegionalDomainName
  #        HostedZoneId: !GetAtt FrontCustomDomain.RegionalHostedZoneId
  #        EvaluateTargetHealth: false
  
  #  FrontApiMapping:
  #    Type: AWS::ApiGatewayV2::ApiMapping
  #    Properties:
  #      DomainName: !FindInMap [EnvironmentVariables, !Ref Environment, FEURL ]
  #      ApiId: !Ref ApiGwHttpEndpoint
  #      Stage: "$default"
  #    DependsOn:
  #      - FrontCustomDomain
  
  
  #  # app domain
  #  AppFrontCustomDomain:
  #    Type: AWS::ApiGatewayV2::DomainName
  #    Properties:
  #      DomainName: !FindInMap [EnvironmentVariables, !Ref Environment, APPURL ]
  #      DomainNameConfigurations:
  #        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
  #          EndpointType: REGIONAL
  #          SecurityPolicy: TLS_1_2
  
  #  AppFrontApiRecord:
  #    Type: AWS::Route53::RecordSet
  #    Properties:
  #      Name: !FindInMap [EnvironmentVariables, !Ref Environment, APPURL ]
  #      Type: A
  #      HostedZoneId: !Sub "{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}"
  #      AliasTarget:
  #        DNSName: !GetAtt AppFrontCustomDomain.RegionalDomainName
  #        HostedZoneId: !GetAtt AppFrontCustomDomain.RegionalHostedZoneId
  #        EvaluateTargetHealth: false
  
  #  AppFrontApiMapping:
  #    Type: AWS::ApiGatewayV2::ApiMapping
  #    Properties:
  #      DomainName: !FindInMap [EnvironmentVariables, !Ref Environment, APPURL ]
  #      ApiId: !Ref ApiGwHttpEndpoint
  #      Stage: "$default"
  #    DependsOn:
  #      - AppFrontCustomDomain

  F2fFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "f2f-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"
  F2FFrontUrl:
    Description: >-
      The API Gateway URL which F2F Front can be invoked on.
    Value: !GetAtt  ApiGwHttpEndpoint.ApiEndpoint
  F2FFrontGatewayId:
    Description: F2F Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-F2FFrontGatewayId"
    Value: !Ref ApiGwHttpEndpoint
    