AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy the Face-2-Face (F2F) FE onto ECS
  Fargate within an existing VPC and private subnets (imported parameters).
  Face-2-Face Front can be invoked via the public API Gateway on the url in the
  F2FFrontURL output.
  The ingress route in summary is: API Gateway -> VPC link -> Private ALB ->
  F2F Front ECS Service
  F2F Front egress to F2F API's API Gateway is via a NAT Gateway which
  should have a route in the provided private subnets' route table.
Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline.
    Default: "none"
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  EnableScalingInDev:
    Type: Number
    Default: 0
    Description: Set to 1 to enable deployment of scaling infra in dev
  SupportManualURL:
    Description: "Link to the F2F support manual"
    Type: String
    Default: 'https://govukverify.atlassian.net/wiki/spaces/FTFCRI/pages/3623649281/F2F+FE+Metrics+Alerts'
  IPVStubStackName:
    Type: String
    Default: "f2f-ipv-stub"
    Description: The name of the deployed IPV stub stack.
  TestHarnessStackName:
    Type: String
    Default: "f2f-test-harness"
    Description: The name of the deployed Test Harness stack
  DeployAlarmsInDev:
    Description: "Set to the string value `true` to deploy alarms in a DEV environment"
    Type: String
    Default: false
  DeploymentStrategy:
    Description: "Predefined deployment configuration for ECS application"
    Type: String
    Default: "None"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  IsProduction: !Equals [ !Ref Environment, production ]
  IsProdLikeEnvironment: !Or
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsNotProdLikeEnvironment: !Not
    - !Condition IsProdLikeEnvironment
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"
  EnableScaling: !Or
    - !Equals [ !Ref EnableScalingInDev, 1]
    - !Equals [ !Ref Environment, build ]
    - !Equals [ !Ref Environment, staging ]
    - !Equals [ !Ref Environment, integration ]
    - !Equals [ !Ref Environment, production ]
  DeployAlarms: !Or
    - Condition: IsNotDevelopment
    - !Equals [!Ref DeployAlarmsInDev, true]
  EnableSpotArmInstance: !Equals [!Ref Environment, dev]
# DO WE NEED TO CHANGE THE ARN?
  UseCanaryDeployment: !Not
    - !Equals [!Ref DeploymentStrategy, "None"]


Mappings:
  EnvironmentConfiguration:
    dev:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    build:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    staging:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    integration:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables
    production:
      dynatraceSecretArn: arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables
  PlatformConfiguration:
    dev:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    build:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    staging:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    integration:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython
    production:
      CSLSEGRESS: arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython

#   # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

# //TODO DOUBLE CHECK WEBSITE URLS ARE CORRECT

  EnvironmentVariables:
    ### These environment variables are referenced further down the file.
    ### Please ensure that any variables defined for an environment are defined for _all_ environments.
    dev:
      APIBASEURL: "https://api-f2f-cri-api.review-o.dev.account.gov.uk"
      DNSSUFFIX: "review-o.dev.account.gov.uk"
      CLOUDFRONTDOMAIN: "d3o29uantyvgzg.cloudfront.net"
      SESSIONTABLENAME: "f2f-front-sessions-dev"
      GTMIDUA: "GTM-TK92W68"
      GTMIDGA4: "GTM-KD86CMZ"
      GA4ENABLED: "true"
      ANALYTICSDOMAIN: "dev.account.gov.uk"
      PROXYURL: "f2f-cri-outbound-proxy-proxy.review-o.dev.account.gov.uk"
      LOGLEVEL: "debug"
      LANGUAGETOGGLEDISABLED: false
      minECSCount: 1
      maxECSCount: 4
    build:
      APIBASEURL: "https://api.review-o.build.account.gov.uk"
      DNSSUFFIX: "review-o.build.account.gov.uk"
      CLOUDFRONTDOMAIN: "d2qciy1us75oe5.cloudfront.net"
      SESSIONTABLENAME: "f2f-front-sessions-build"
      GTMIDUA: "GTM-TK92W68"
      GTMIDGA4: "GTM-KD86CMZ"
      GA4ENABLED: "true"
      ANALYTICSDOMAIN: "build.account.gov.uk"
      PROXYURL: "proxy.review-o.build.account.gov.uk"
      LOGLEVEL: "warn"
      LANGUAGETOGGLEDISABLED: false
      minECSCount: 6
      maxECSCount: 60
    staging:
      APIBASEURL: "https://api.review-o.staging.account.gov.uk"
      DNSSUFFIX: "review-o.staging.account.gov.uk"
      CLOUDFRONTDOMAIN: "d205d1cygtnceq.cloudfront.net"
      SESSIONTABLENAME: "f2f-front-sessions-staging"
      GTMIDUA: "GTM-TK92W68"
      GTMIDGA4: "GTM-KD86CMZ"
      GA4ENABLED: "true"
      ANALYTICSDOMAIN: "staging.account.gov.uk"
      PROXYURL: "proxy.review-o.staging.account.gov.uk"
      LOGLEVEL: "warn"
      LANGUAGETOGGLEDISABLED: false
      minECSCount: 2
      maxECSCount: 4
    integration:
      APIBASEURL: "https://api.review-o.integration.account.gov.uk"
      DNSSUFFIX: "review-o.integration.account.gov.uk"
      CLOUDFRONTDOMAIN: "d1isez0gflcoql.cloudfront.net"
      SESSIONTABLENAME: "f2f-front-sessions-integration"
      GTMIDUA: "GTM-TK92W68"
      GTMIDGA4: "GTM-KD86CMZ"
      GA4ENABLED: "false"
      ANALYTICSDOMAIN: "integration.account.gov.uk"
      PROXYURL: "proxy.review-o.integration.account.gov.uk"
      LOGLEVEL: "warn"
      LANGUAGETOGGLEDISABLED: false
      minECSCount: 2
      maxECSCount: 4
    production:
      APIBASEURL: "https://api.review-o.account.gov.uk"
      DNSSUFFIX: "review-o.account.gov.uk"
      CLOUDFRONTDOMAIN: "d6q0qtykvm2qx.cloudfront.net"
      SESSIONTABLENAME: "f2f-front-sessions-production"
      GTMIDUA: "GTM-TT5HDKV"
      GTMIDGA4: "GTM-K4PBJH3"
      GA4ENABLED: "false"
      ANALYTICSDOMAIN: "account.gov.uk"
      PROXYURL: "proxy.review-o.account.gov.uk"
      LOGLEVEL: "warn"
      LANGUAGETOGGLEDISABLED: false
      minECSCount: 6
      maxECSCount: 60

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        F2F Front LoadBalancer Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the F2F Front load balancer and
        the F2F Front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        F2F Front ECS Security Group permitting outbound
        to anywhere.
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: '-1'
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      Description: >-
        F2F Front ECS permits inbound from the F2F Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub f2f-front-${Environment}-access-logs
      VersioningConfiguration:
        Status: "Enabled"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  F2FFrontAccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${AccessLogsBucket}/f2f-front-${Environment}/AWSLogs/${AWS::AccountId}/*

  # Private Application Load Balancer
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue:
            !Sub "${VpcStackName}-PrivateSubnetIdB"
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
          - Key: access_logs.s3.prefix
            Value: !Sub f2f-front-${Environment}
          - Key: routing.http.drop_invalid_header_fields.enabled
            Value: true
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListenerTargetGroupECSGreen:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS cluster, service
  F2FFrontEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      CapacityProviders:
        - !If [EnableSpotArmInstance, "FARGATE_SPOT", "FARGATE"]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "F2F"
        - Key: Environment
          Value: !Sub "${Environment}"

  F2FFrontEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref F2FFrontEcsCluster
      DeploymentConfiguration:  !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - MaximumPercent: 200
          MinimumHealthyPercent: 50
          DeploymentCircuitBreaker:
            Enable: !If [EnableSpotArmInstance, FALSE, TRUE]
            Rollback: !If [EnableSpotArmInstance, FALSE, TRUE]
      DeploymentController:
        Type: !If
          - UseCanaryDeployment
          - CODE_DEPLOY
          - ECS
      DesiredCount: !FindInMap [EnvironmentVariables, !Ref Environment, minECSCount]
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - - ContainerName: app
            ContainerPort: 8080
            TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups:
              - !GetAtt ECSSecurityGroup.GroupId
            Subnets:
              - Fn::ImportValue:
                  !Sub "${VpcStackName}-ProtectedSubnetIdA"
              - Fn::ImportValue:
                  !Sub "${VpcStackName}-ProtectedSubnetIdB"
      TaskDefinition: !If
        - UseCanaryDeployment
        - !Ref AWS::NoValue
        - !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "F2F"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-F2FFront-ECS
      RetentionInDays: 30

  CSLSECSAccessSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsNotDevelopment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: IsNotDevelopment
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "ECSFatalerror-message"

  ECSFatalErrorAlarm:
    DependsOn:
      - "ECSFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: !Sub "${AWS::StackName}-ECSFatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      MetricName: ECSFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  EventLoopDelayMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{($.eventLoopDelay = *)}"
      MetricTransformations:
        - MetricValue: $.eventLoopDelay
          MetricName: EventLoopDelay
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages

  EventLoopUtilizationIdleMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.eventLoopUtilization.idle = * }"
      MetricTransformations:
        - MetricValue: $.eventLoopUtilization.idle
          MetricName: EventLoopUtilizationIdle
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages

  EventLoopUtilizationActiveMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.eventLoopUtilization.active = * }"
      MetricTransformations:
        - MetricValue: $.eventLoopUtilization.active
          MetricName: EventLoopUtilizationActive
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages

  EventLoopUtilizationUtilizationMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.eventLoopUtilization.utilization = * }"
      MetricTransformations:
        - MetricValue: $.eventLoopUtilization.utilization
          MetricName: EventLoopUtilizationUtilization
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages

  RequestsPerSecondMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.requestsPerSecond.dynamic = * }"
      MetricTransformations:
        - MetricValue: $.requestsPerSecond.dynamic
          MetricName: RequestsPerSecond
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages
          Unit: Count/Second

  AvgResponseTimeMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.avgResponseTime.dynamic = * }"
      MetricTransformations:
        - MetricValue: $.avgResponseTime.dynamic
          MetricName: AvgResponseTime
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages
          Unit: Count/Second

  MaxConcurrentConnectionsMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref ECSAccessLogsGroup
      FilterPattern: "{ $.maxConcurrentConnections = * }"
      MetricTransformations:
        - MetricValue: $.maxConcurrentConnections
          MetricName: MaxConcurrentConnections
          MetricNamespace: !Sub ${AWS::StackName}/LogMessages
          Unit: Count            

  # Fargate tasks

  ECSServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, APIBASEURL ]
            - Name: FRONT_END_CUSTOM_DOMAIN
              Value: !Ref F2FFrontCustomDomain
            - Name: SESSION_TABLE_NAME
              Value: !Ref F2fFrontSessionsTable
            - Name: UNIVERSAL_ANALYTICS_GTM_CONTAINER_ID
              Value: !FindInMap [ EnvironmentVariables, !Ref Environment, GTMIDUA ]
            - Name: GOOGLE_ANALYTICS_4_GTM_CONTAINER_ID
              Value: !FindInMap [ EnvironmentVariables, !Ref Environment, GTMIDGA4 ]
            - Name: GA4_ENABLED
              Value: !FindInMap [ EnvironmentVariables, !Ref Environment, GA4ENABLED ]
            - Name: ANALYTICS_DOMAIN
              Value:
                !If [
                  IsProduction,
                  "account.gov.uk",
                  !Sub "${Environment}.account.gov.uk"
                ]
            - Name: PROXYURL
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, PROXYURL ]
            - Name: LOG_LEVEL
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, LOGLEVEL ]
            - Name: LANGUAGE_TOGGLE_DISABLED
              Value: !FindInMap [EnvironmentVariables, !Ref Environment, LANGUAGETOGGLEDISABLED ]

          Secrets:
            - Name: DT_TENANT
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                  - ':DT_TENANT::'
            - Name: DT_TENANTTOKEN
              ValueFrom: !Join
                - ''
                - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                  - ':DT_TENANTTOKEN::'
            - Name: DT_CONNECTION_POINT
              ValueFrom: !Join
              - ''
              - - !FindInMap [ EnvironmentConfiguration, !Ref Environment, dynatraceSecretArn ]
                - ':DT_CONNECTION_POINT::'

          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "curl -f http://localhost:8080/healthcheck || exit 1"
            Interval: 5
            Retries: 10
            Timeout: 2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group : !Ref ECSAccessLogsGroup
              awslogs-region : !Sub ${AWS::Region}
              awslogs-stream-prefix : !Sub f2f-front-${Environment}
      Cpu: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: !If [EnableSpotArmInstance, "ARM64", "X86_64"]
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "F2F"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullF2FFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets"
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: F2fFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt F2fFrontSessionsTable.Arn
        - PolicyName: DynatraceGetSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceNonProductionVariables*"
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:DynatraceProductionVariables*"
              - Effect: Allow
                Action:
                  - "secretsmanager:ListSecrets"
                Resource:
                  - "arn:aws:secretsmanager:eu-west-2:216552277552:secret:*"
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource:
                  - "arn:aws:kms:eu-west-2:216552277552:key/*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  #
  # API Gateway
  #
  #

  ApiGwHttpEndpoint:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: !Sub "f2f-front-${Environment} ${AWS::StackName}"
      Description: !Sub "f2f-front-${Environment} ${AWS::StackName} Server-side rendered Frontend"
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue:
          !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: '1.0'

  APIGWRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: 'ANY /{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      DefaultRouteSettings:
        DataTraceEnabled: false
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 400
        ThrottlingRateLimit: 200
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency",
          "integrationLatency":"$context.integrationLatency"
          }

  CloudFrontWAFv2ACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLArn: !ImportValue cfront-origin-distrib-CloakingOriginWebACLArn

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-F2FFront-API-GW-AccessLogs
      RetentionInDays: 30

  CSLSAPIGWAccessSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    # Condition: IsNotDevelopment
    Properties:
      DestinationArn:
        !FindInMap [PlatformConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  APIGWFatalErorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Condition: IsNotDevelopment
    Properties:
      LogGroupName: !Ref APIGWAccessLogsGroup
      FilterPattern: '{ $.level = "FATAL" || $.message = "Unhandled Exception:*" }'
      MetricTransformations:
        -
          MetricValue: "1"
          MetricNamespace: !Sub "${AWS::StackName}/LogMessages"
          MetricName: "APIGWFatalerror-message"

  APIGWFatalErrorAlarm:
    DependsOn:
      - "APIGWFatalErorMetricFilter"
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: !Sub "${AWS::StackName}-APIGWFatalErrorAlarm"
      AlarmDescription: !Sub "Trigger an alarm when Fatal Error occurs ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: [ ]
      MetricName: APIGWFatalerror-message
      Namespace: !Sub "${AWS::StackName}/LogMessages"
      Statistic: Sum
      Dimensions: [ ]
      Period: 60
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # Autoscaling
  # The number of pods will increase when the configured CPU utilization is breached for more than 3 minutes.
  # Scaling down will occur after 15 minutes of 90% utilization of the configured CPU utilization.

  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity:
        !FindInMap [EnvironmentVariables, !Ref Environment, minECSCount]
      MaxCapacity:
        !FindInMap [EnvironmentVariables, !Ref Environment, maxECSCount]
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref   F2FFrontEcsCluster
          - !GetAtt F2FFrontEcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EcsStepScaleOutPolicy:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsStepScalingOutPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref F2FFrontEcsCluster
          - !GetAtt F2FFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown:
          180 # The policy will continue to respond to additional alarm breaches,
          # even while a scaling activity is in progress. This means Application
        # Auto Scaling will evaluate all alarm breaches as they occur.
        # A cooldown period is used to protect against over-scaling due to
        # multiple alarm breaches occurring in rapid succession.
        MinAdjustmentMagnitude: 1
        StepAdjustments:
          - MetricIntervalUpperBound: 0 # 60%
            ScalingAdjustment: 100 # Scale by 100% of containers if the metric is breached
            # with <60% utilisation
          - MetricIntervalLowerBound: 0 # 60%
            MetricIntervalUpperBound: 30 # 90%
            ScalingAdjustment: 200 # Scale by 200% of containers if the metric is breached
            # with 80-90% utilisation
          - MetricIntervalLowerBound: 30 # 90%
            MetricIntervalUpperBound: 35 # 95%
            ScalingAdjustment: 300 # Scale by 300% of containers if the metric is breached
            # with 90-95% utilisation
          - MetricIntervalLowerBound: 35 # 95%
            ScalingAdjustment:
              500 # Scale by 500% of containers if the metric is breached
            # with >95% utilisation
            # Note: CPU can scale greater than 100% in a burst mode
            # on Fargate, so leave the upper bound open

  EcsStepScaleInPolicy:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsStepScalingInPolicy
      PolicyType: StepScaling
      ResourceId: !Join
        - "/"
        - - "service"
          - !Ref F2FFrontEcsCluster
          - !GetAtt F2FFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown:
          180 # The policy will continue to respond to additional alarm breaches,
          # even while a scaling activity is in progress. This means Application
        # Auto Scaling will evaluate all alarm breaches as they occur.
        # A cooldown period is used to protect against under-scaling due to
        # multiple alarm breaches occurring in rapid succession.
        StepAdjustments:
          - MetricIntervalUpperBound: -15 # 5%
            ScalingAdjustment: -90 # Scale down by 90% of containers if the metric is breached
            # with <5% utilisation
          - MetricIntervalLowerBound: -15 # 5%
            MetricIntervalUpperBound: 0 # 20%
            ScalingAdjustment:
              -50 # Scale down 50% of containers if the metric is breached
            # with <20% utilisation

  EcsStepScaleOutAlarm:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref EcsStepScaleOutPolicy
      AlarmDescription: "EcsClusterOver60PercentCPU"
      ComparisonOperator: "GreaterThanThreshold"
      DatapointsToAlarm: "1"
      Dimensions:
        - Name: ClusterName
          Value: !Ref F2FFrontEcsCluster
        - Name: ServiceName
          Value: !GetAtt F2FFrontEcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "2"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "60"

  EcsStepScaleInAlarm:
    DependsOn: ECSAutoScalingTarget
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref EcsStepScaleInPolicy
      AlarmDescription: "EcsClusterUnder60PercentCPU"
      ComparisonOperator: "LessThanThreshold"
      DatapointsToAlarm: "5"
      Dimensions:
        - Name: ClusterName
          Value: !Ref F2FFrontEcsCluster
        - Name: ServiceName
          Value: !GetAtt F2FFrontEcsService.Name
      Unit: "Percent"
      EvaluationPeriods: "5"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: "60"
      Threshold: "20"

### Front End API Gateway Custom Domain definition

  F2FFrontCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !If
        - IsNotDevelopment
        - !Sub
          - "www.${DNSSUFFIX}"
          - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
        - !Sub
          - "${AWS::StackName}.${DNSSUFFIX}"
          - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
      DomainNameConfigurations:
        - CertificateArn: !Sub "{{resolve:ssm:/${Environment}/Platform/ACM/PrimaryZoneWildcardCertificateARN}}"
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  F2FFrontApiRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !If
        - IsNotDevelopment
        - !Sub
          - "www.${DNSSUFFIX}"
          - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
        - !Sub
          - "${AWS::StackName}.${DNSSUFFIX}"
          - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
      Type: A
      HostedZoneId: !ImportValue PublicHostedZoneId
      AliasTarget:
        DNSName:  !FindInMap [EnvironmentVariables, !Ref Environment, CLOUDFRONTDOMAIN]
        HostedZoneId: Z2FDTNDATAQYW2
        EvaluateTargetHealth: false

  F2FFrontApiOriginRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !If
      - IsNotDevelopment
      - !Sub
        - "origin.${DNSSUFFIX}"
        - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
      - !Sub
        - "origin.${AWS::StackName}.${DNSSUFFIX}"
        - DNSSUFFIX: !FindInMap [EnvironmentVariables, !Ref Environment, DNSSUFFIX]
      Type: A
      HostedZoneId: !ImportValue PublicHostedZoneId
      AliasTarget:
        DNSName: !GetAtt F2FFrontCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt F2FFrontCustomDomain.RegionalHostedZoneId
        EvaluateTargetHealth: false

  F2FFrontApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref F2FFrontCustomDomain
      ApiId: !Ref ApiGwHttpEndpoint
      Stage: !Ref APIStageDefault

  F2fFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !If
        - IsNotDevelopment
        - !Sub
          - "${SESSIONTABLENAME}"
          - SESSIONTABLENAME: !FindInMap [EnvironmentVariables, !Ref Environment, SESSIONTABLENAME]
        - !Sub
          - "${SESSIONTABLENAME}-${AWS::StackName}"
          - SESSIONTABLENAME: !FindInMap [EnvironmentVariables, !Ref Environment, SESSIONTABLENAME]
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

# ECS Canary deployments
  ECSCanaryDeploymentStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseCanaryDeployment
    Properties:
      TemplateURL: https://template-storage-templatebucket-1upzyw6v9cs42.s3.eu-west-2.amazonaws.com/ecs-canary-deployment/template.yaml?versionId=5RRU1nfKQD_d08FKttr8W7pzrAsqQiUM
      Parameters:
        PermissionsBoundary:
          Fn::ImportValue: !Sub "${AWS::StackName}-ECSCanaryPermissionsBoundaryArn"
        CodeSigningConfigArn: !If
          - UseCodeSigning
          - !Ref CodeSigningConfigArn
          - !Ref AWS::NoValue
        ContainerName: app
        ContainerPort: 8080
        DeploymentStrategy: !Ref DeploymentStrategy
        ECSClusterName: !Ref F2FFrontEcsCluster
        ECSServiceName: !GetAtt F2FFrontEcsService.Name
        ECSServiceTaskDefinition: !Ref ECSServiceTaskDefinition
        TargetGroupName: !GetAtt LoadBalancerListenerTargetGroupECS.TargetGroupName
        GreenTargetGroupName: !GetAtt LoadBalancerListenerTargetGroupECSGreen.TargetGroupName
        LoadBalancerListenerARN: !Ref LoadBalancerListener
        SecurityGroups: !GetAtt ECSSecurityGroup.GroupId
        VpcId: !Sub ${VpcStackName}-VpcId
        Subnets: !Join
          - ","
          - - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdA"
            - Fn::ImportValue: !Sub "${VpcStackName}-ProtectedSubnetIdB"
        CloudWatchAlarms: !Ref FrontTargetGroup5xxPercentErrors

  FE5XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsNotDevelopment
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FE5XXErrorAlarm"
      AlarmDescription: !Sub "Trigger the warning alarm for Frontend 5XX Error ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      AlarmActions:
        - !ImportValue platform-alarm-pagerduty-alert-topic
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<150 || error<5,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 5xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations) * 100

  FE4XXErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FE4XXErrorAlarm"
      AlarmDescription: !Sub "Trigger the warning alarm for Frontend 4xx Alarm ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: errorThreshold
          Label: errorThreshold
          ReturnData: true
          Expression: IF(invocations<150 || error<2,0,errorPercentage)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: error
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: 4xx
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: errorPercentage
          Label: errorPercentage
          ReturnData: false
          Expression: (error/invocations) * 100

  FELatencyAlarmP95:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELatencyAlarmP95"
      AlarmDescription: !Sub "Trigger the warning alarm for Frontend P95 Latency ${SupportManualURL}"
      ActionsEnabled: false
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 1000
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<25,0,latency95Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency95Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p95

  FELatencyAlarmP99:
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELatencyAlarmP99"
      AlarmDescription: !Sub "Trigger the warning alarm for Frontend P99 Latency ${SupportManualURL}"
      ActionsEnabled: false
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: [ ]
      Dimensions: [ ]
      EvaluationPeriods: 5
      DatapointsToAlarm: 2
      Threshold: 2500
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: latencyThreshold
          Label: latencyThreshold
          ReturnData: true
          Expression: IF(invocations<150,0,latency99Percentile)
        - Id: invocations
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Count
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: Sum
        - Id: latency99Percentile
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApiGateway
              MetricName: Latency
              Dimensions:
                - Name: ApiId
                  Value: !Ref ApiGwHttpEndpoint
            Period: 60
            Stat: p99

  FELowContainerTaskCountAlarm:
    DependsOn:
      - F2FFrontEcsCluster
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELowContainerTaskCountAlarm"
      AlarmDescription: !Sub "Trigger a warning if the running container task count drops below 2 ${SupportManualURL}"
      ActionsEnabled: true
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: TaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref F2FFrontEcsCluster
            Period: 60
            Stat: Minimum

  FEHighContainerTaskCountWarning:
    DependsOn:
      - F2FFrontEcsService
      - F2FFrontEcsCluster
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FEHighContainerTaskCountWarning"
      AlarmDescription: !Sub "Trigger a warning if the running container task count reaches the auto-scaling maximum for 5 minutes ${SupportManualURL}"
      ActionsEnabled: true
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 12
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: RunningTaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref F2FFrontEcsCluster
                - Name: ServiceName
                  Value: !GetAtt F2FFrontEcsService.Name
            Period: 60
            Stat: Minimum

  FELowContainerTaskCountCriticalAlarm:
    DependsOn:
      - F2FFrontEcsCluster
    Type: AWS::CloudWatch::Alarm
    Condition: "DeployAlarms"
    Properties:
      AlarmName: !Sub "${AWS::StackName}-FELowContainerTaskCountCriticalAlarm"
      AlarmDescription: !Sub "Trigger a critical alert if the running container task count drops below 1 ${SupportManualURL}"
      ActionsEnabled: false  # to be enabled once proved stable in production
      AlarmActions:
        - !ImportValue platform-alarm-topic-critical-alert
      InsufficientDataActions: []
      Dimensions: []
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      Threshold: 0
      ComparisonOperator: LessThanOrEqualToThreshold
      TreatMissingData: breaching
      Metrics:
        - Id: containerTaskCount
          ReturnData: true
          MetricStat:
            Metric:
              Namespace: ECS/ContainerInsights
              MetricName: TaskCount
              Dimensions:
                - Name: ClusterName
                  Value: !Ref F2FFrontEcsCluster
            Period: 60
            Stat: Maximum

  FrontTargetGroup5xxPercentErrors:
    Type: AWS::CloudWatch::Alarm
    Condition: UseCanaryDeployment
    Properties:
      AlarmName: FrontTargetGroup5xxPercentAlarm
      AlarmDescription: >
        The number of HTTP 5XX server error codes that originate from the
        target group is greater than 5% of all traffic.
      OKActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      AlarmActions:
        - !ImportValue platform-alarm-topic-slack-warning-alert
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Metrics:
        - Id: e1
          Label: ErrorPercent
          ReturnData: true
          Expression: (m1/m2)*100
        - Id: m1
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: HTTPCode_Target_5XX_Count
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum
        - Id: m2
          ReturnData: false
          MetricStat:
            Metric:
              Namespace: AWS/ApplicationELB
              MetricName: RequestCount
              Dimensions:
                - Name: LoadBalancer
                  Value: !GetAtt LoadBalancer.LoadBalancerFullName
            Period: 60
            Stat: Sum

  WarningAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: IsNotDevelopment
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Warning-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "F2F Front 5XX Error Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FE5XXErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "F2F Front 4XX Error Alarm - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FE4XXErrorAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "F2F Front Latency Alarm P95 - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELatencyAlarmP95.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 6,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "F2F Front Latency Alarm P99 - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELatencyAlarmP99.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 12,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "F2F Front Low Container Task Count Warning - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELowContainerTaskCountAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              },
              {
                "height": 6,
                "width": 12,
                "y": 18,
                "x": 12,
                "type": "metric",
                "properties": {
                  "title": "F2F Front High Container Task Count Warning - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FEHighContainerTaskCountWarning.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

  CriticalAlarmDashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: "DeployAlarms"
    Properties:
      DashboardName: !Sub '${AWS::StackName}-Critical-Alarm-Overview'
      DashboardBody:
        Fn::Sub: >
          {
            "widgets": [
              {
                "height": 6,
                "width": 12,
                "y": 0,
                "x": 0,
                "type": "metric",
                "properties": {
                  "title": "F2F Front Low Container Task Count Critical - ${AWS::StackName}",
                  "annotations": {
                    "alarms": ["${FELowContainerTaskCountCriticalAlarm.Arn}"]
                  },
                  "view": "timeSeries",
                  "stacked": false
                }
              }
            ]
          }

Outputs:
  StackName:
    Description: "CloudFormation stack name"
    Value: !Sub "${AWS::StackName}"
  F2FFrontUrl:
    Description: >-
      The API Gateway URL which F2F Front can be invoked on.
    Value: !GetAtt  ApiGwHttpEndpoint.ApiEndpoint
  F2FFrontGatewayId:
    Description: F2F Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-F2FFrontGatewayId"
    Value: !Ref ApiGwHttpEndpoint
  F2FFrontSessionsTableName:
    Description: Table name for the FE sessions table
    Value: !Ref F2fFrontSessionsTable
  F2FCustomDomain:
    Description: F2F Custom Domain API Gateway ID
    Value: !Ref F2FFrontCustomDomain
  F2FIPVStubExecuteURL:
    Condition: IsNotProdLikeEnvironment
    Description: "F2F IPV Stub"
    Value:
      Fn::ImportValue: !Sub '${IPVStubStackName}-IPVStubExecuteUrl'
  F2FTestHarnessURL:
    Condition: IsNotProdLikeEnvironment
    Description: "F2F Test Harness"
    Value:
      Fn::ImportValue: !Sub '${TestHarnessStackName}-TestHarnessExecuteUrl'
  BackendSessionTableName:
    Condition: IsNotProdLikeEnvironment
    Description: "Backend Session Table name for use by Test Harness"
    Value:
      Fn::ImportValue: "f2f-cri-api-SessionTable-name"
  F2FBackendURL:
    Condition: IsNotProdLikeEnvironment
    Description: "Backend Custom Domain for use by Test Harness"
    Value:
      Fn::ImportValue: "f2f-cri-api-F2FBackendURL"
